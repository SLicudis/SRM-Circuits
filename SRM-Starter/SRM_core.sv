/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module DIG_D_FF_1bit
#(
    parameter Default = 0
)
(
   input d,
   input c,
   output q,
   output nq
);
    reg state;

    assign q = state;
    assign nq = ~state;

    always @ (posedge c) begin
        state <= d;
    end

    initial begin
        state = Default;
    end
endmodule

module SRM_core (
  input clk,
  input En,
  input Res,
  input H_int,
  input [31:0] D_in,
  input [31:0] I_in,
  output clk2,
  output MEM_req,
  output MEM_we,
  output [21:0] D_Addr,
  output [31:0] D_out,
  output [21:0] I_Addr,
  output jmp,
  output int_en,
  output [21:0] next_jmp
);
  wire int_en_temp;
  wire [4:0] s0;
  wire [3:0] sub_flags;
  wire [3:0] fn1;
  wire s1;
  wire [13:0] s2;
  wire [31:0] reg_aout;
  wire [31:0] alu_b;
  wire [31:0] alu_res;
  wire [31:0] pc_in;
  wire int_av;
  wire jmp_temp;
  wire [31:0] pc;
  wire [31:0] s3;
  wire s4;
  wire s5;
  wire s_mem_we;
  wire s6;
  wire [31:0] r_in;
  wire r_cwe;
  wire ir_tsf;
  wire ks;
  wire [4:0] r_asel;
  wire [4:0] r_bsel;
  wire [4:0] r_csel;
  wire [31:0] reg_bout;
  wire [31:0] ir;
  assign clk2 = ~ clk;
  assign s0 = I_in[31:27];
  // inst_decoder
  inst_decoder inst_decoder_i0 (
    .en( En ),
    .int_en( int_en_temp ),
    .opcode( s0 ),
    .sub_flags( sub_flags ),
    .func_1( fn1 ),
    .hardware_int( s1 ),
    .control_lines( s2 )
  );
  // ProgramCounter
  ProgramCounter ProgramCounter_i1 (
    .din( pc_in ),
    .we( int_av ),
    .clk( clk ),
    .jmp( jmp_temp ),
    .rst( Res ),
    .dout( pc )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i2 (
    .d( s4 ),
    .c( clk ),
    .q( MEM_we ),
    .nq ( s5 )
  );
  assign int_av = (En & ~ s4);
  // int_wait
  int_wait int_wait_i3 (
    .h_int( H_int ),
    .clk( clk ),
    .av( int_av ),
    .int_mode( s6 )
  );
  // regfile
  regfile regfile_i4 (
    .din( r_in ),
    .clk( clk ),
    .c_we( r_cwe ),
    .ir_tsf( ir_tsf ),
    .ks( ks ),
    .asel( r_asel ),
    .bsel( r_bsel ),
    .csel( r_csel ),
    .pc( pc ),
    .aout( reg_aout ),
    .bout( reg_bout ),
    .ir( ir ),
    .int_en( int_en_temp )
  );
  // connections
  connections connections_i5 (
    .control_lines( s2 ),
    .inst_bus( I_in ),
    .din( D_in ),
    .alu_res( alu_res ),
    .reg_bout( reg_bout ),
    .reg_aout( reg_aout ),
    .pc( pc ),
    .ir( ir ),
    .reg_c_we( r_cwe ),
    .jmp( jmp_temp ),
    .mem_we( s_mem_we ),
    .ir_tsf( ir_tsf ),
    .mem_req( MEM_req ),
    .ks( ks ),
    .fn1( fn1 ),
    .reg_asel( r_asel ),
    .reg_bsel( r_bsel ),
    .reg_csel( r_csel ),
    .alu_b_in( alu_b ),
    .reg_din( r_in ),
    .pc_din( pc_in ),
    .d_addr( s3 ),
    .dout( D_out )
  );
  // alu
  alu alu_i6 (
    .a( reg_aout ),
    .b( alu_b ),
    .op( fn1 ),
    .res( alu_res ),
    .sub_flags( sub_flags )
  );
  assign s4 = (s5 & s_mem_we);
  assign s1 = (int_en_temp & s6 & int_av);
  assign D_Addr = s3[23:2];
  assign I_Addr = pc[23:2];
  assign next_jmp = pc_in[23:2];
  assign jmp = jmp_temp;
  assign int_en = int_en_temp;
endmodule
